# 自我介绍

# 基础知识

JVM调优经验：

在阿里体育资金平台项目中，系统中大部分类都是无状态的，每个操作处理完后有大量的临时变量生成并需要回收，即新生代的数量远大于了老年代的数量，于是提高了新生代对老年代的比例。从而提高了系统的总体并发量。 -XX:NewRatio： 调整新生代老年代的比例； 

-XX:

# 项目

**项目中有什么难点？**

1.未读消息提醒功能。

对于公益的每一个执行反馈，需要给相关用户提醒有新的内容。提醒的形式是在用户C端显示页面增加小红点。

难点：需要尽量保证实时性，提高用户体验，用户已读消息不能重复提醒，同时要避免大量数据造成的数据膨胀。

为了防止影响执行反馈处理的效率，降低系统耦合。采用databus监听数据库中用户执行反馈的变更，并推送消息进行广播。C端业务接收消息，并根据用户反馈消息的关键维度建立数据，并保存在数据库中。为了避免数据量过大，只保存用户未读状态，用户已读则直接物理删除数据。

2.阿里体育资金系统频繁full gc排查

**需求说明**：在做资金结算功能时有个优化点：为了方便排查用户代扣失败原因，需要将用户代扣失败的原因记录下来。通常失败原因会由上游支付中心通过异常的errormessage暴露出来，例如银行卡余额不足，用户账户异常等。于是我的做法就是将代扣执行过程中出现的异常的errormessage完整地保存在代扣记录表的错误原因字段中。

**现象**：需求上线不久后，没到流量高峰，系统就频繁出现full gc，伴随着rt升高，请求超时增多。

**处理方案**：从机器中将执行full gc时刻的jvm dump下载下来，通过dump文件分析工具分析是什么造成的full gc。发现堆里面存在着大量的超大字符串实例。其内容是java异常的堆栈信息。在排查代码，这些异常堆栈信息正式之前要保存的error message。

**结论** 上游一个事务中间件有个特殊逻辑是在getErrorMessage的时候会连带返回该异常的异常堆栈。这个异常堆栈内容是个大的字符串，而jvm的大对象是会直接放在老年代的，在并发高的时候，这个事务中间件经常会报超时之类的异常，导致短时间出现大量的大的字符串，这些字符串迅速将老年代占满，然后就触发了full gc。

**反思** 对于要保存的字段，需要梳理字段可能的长度，不能盲目保存不确定的内容。

参考：[线上出现fullgc问题如何排查？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/119401318)



**SQL优化的经验**

通过in多个字段，提高数据查询效率。

在商户捐项目中，存在着账号，品牌，门店这3个不同的字段，由于这三个的多对多的复杂关系，一个账号下能看到的品牌和门店都是成组出现的， 例如一个账号下，只能看A品牌的x门店， B品牌的y门店， C品牌的z门店，由于多对多的关系，xyz三个门店还对应这其他的品牌。所以门店和品牌是分组形式出现的。一开始的查询的条件是 where 门店 in （） and 品牌 in （）， 建立的索引是门店和品牌分别建立索引。 这样的话，MySQL只会使用其中一个索引，甚至索引失效。查询效率很低。 遇到管理门店特别多的KA账号会出现慢SQL。 为了解决这个问题， 我采用了 in多个字段的语法 即 where (品牌， 门店) In ((A,x), (B,y), (C,z))， 然后建立门店和品牌的联合索引。这样的话，正好命中联合索引，大大提高了查询效率。

**项目架构是什么**
